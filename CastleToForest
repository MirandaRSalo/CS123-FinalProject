float horizon=355;
float time=0;
float castleSize=1;
float castleMove=0;
float treeMove=0;
boolean horizonGo, timeGo, castleGo;
float vT=0;
float xT[];
float yT[];
color colorT[];
color colorTt[];
float widthTree[];
float cloudMove=0;
int numTrees;

void setup() {
  size(500, 700);
  background(245);
  horizonGo=timeGo=castleGo=false;
  numTrees=20;
  xT= new float[numTrees];
  yT= new float[numTrees];
  colorT= new color[numTrees];
  colorTt= new color[numTrees];
  widthTree= new float[numTrees];
  for (int i=0; i<numTrees; i++) {
    xT[i]=random (99*i, 101*i);
    yT[i]=random (50, 80);
    colorT[i]= color(random(135, 160), random(80, 105), random(35, 55));
    colorTt[i]= color(random(0, 70), random(180, 230), random(100, 140));
    widthTree[i]= random(45, 53);
  }
}

void cloud(float cx){
  fill(225,215,225);
  noStroke();
  ellipse(cx+81,73,40,40);
  ellipse(cx+48,82,42,42);
  ellipse(cx+103,117,180,70);
  ellipse(cx+106,82,20,20);
  ellipse(cx+30,100,24,24);
  ellipse(cx+125,80,24,20);
  ellipse(cx+140,77,28,25);
  ellipse(cx+150,83,25,20);
  ellipse(cx+170,95,30,25);
}

void tree(float x, float y, float wT, color cT, color cTt) {
  stroke(40,40,40);
  strokeWeight(1);
  fill(cT);
  rect(x, y, wT, height-y);
  fill(cTt);
  triangle(x-wT, y, x+2*wT, y, x+wT/2, y-3*wT);
}

void castle() {
  pushMatrix();
  translate(250, 350);
  fill(#CEC0E8);//DarkTan
  strokeWeight(.1);
  stroke(0);
  scale(12);
  rect(-7, -3, 14, 8);//CastleBody
  fill(#A7735F);//Brown
  rect(-2, 0, 4, 5, 50, 50, 0, 0);//Door
  //WindowsAboveDoor
  pushMatrix();
  scale(.8);
  translate(0, -.75);
  rect(-2.75, -1.5, 1, 1.5, 50, 50, 0, 0);//Window1
  rect(-1.25, -2, 1, 1.5, 50, 50, 0, 0);//Window2
  rect(.25, -2, 1, 1.5, 50, 50, 0, 0);//Window3
  rect(1.75, -1.5, 1, 1.5, 50, 50, 0, 0);//Window4
  popMatrix();

  //TopTower
  fill(#CEC0E8);//DarkTan
  rect(-2, -8, 4, 5);
  fill(#EDBD0C);//RoyalBlue
  quad(2, -8, -2, -8, -1, -11, 1, -11);
  fill(#C49E16);//DarkGold
  triangle(-.6, -11, 0, -13, .6, -11);
  stroke(.01);
  strokeWeight(.1);
  line(0, -13, 0, -15);//FlagPole
  line(0, 0, 0, 4.9);//Door
  //noStroke();
  fill(255, 0, 0);//Red
  triangle(0, -14, 0, -15, 2, -14.5);//Flag
  fill(#A7735F);//Brown
  //TopWindow
  beginShape();
  vertex(-.5, -5);
  vertex(-.5, -6);
  vertex(0, -6.5);
  vertex(.5, -6);
  vertex(.5, -5);
  endShape(CLOSE);
  //RightTower
  fill(#D9CEED);
  drawjagged(2.5, -2.2);
  fill(#D9CEED);//LightTan
  quad(6.5, 0, 8.5, 0, 9.5, 5, 5.5, 5);//Lower
  arc(7.5, 5, 4, 1.25, 0, PI);
  quad(8.5, 0, 6.5, 0, 6, -4, 9, -4);//Upper
  fill(#EDBD0C);//RoyalBlue
  triangle(9, -4, 6, -4, 7.5, -9);//Triangle
  strokeWeight(.1);
  stroke(0);
  line(7.5, -9, 7.5, -11);//FlagPole
  //noStroke();
  fill(255, 0, 0);//Red
  triangle(7.5, -10, 7.5, -11, 9.5, -10.5);//Flag
  //TopRightWindow
  fill(#A7735F);//Brown
  beginShape();
  vertex(7, -1);
  vertex(7, -2);
  vertex(7.5, -2.5);
  vertex(8, -2);
  vertex(8, -1);
  endShape(CLOSE);
  rect(7, 3, 1, 2.5, 60, 60, 0, 0);//RightDoor

  //LeftTower
  fill(#D9CEED);
  drawjagged(-7.5, -2.2);
  fill(#D9CEED);//LightTan
  quad(-6.5, 0, -8.5, 0, -9.5, 5, -5.5, 5);//Lower
  arc(-7.5, 5, 4, 1.25, 0, PI);
  quad(-8.5, 0, -6.5, 0, -6, -4, -9, -4);//Upper
  fill(#EDBD0C);//RoyalBlue
  triangle(-9, -4, -6, -4, -7.5, -9);//Triangle
  strokeWeight(.1);
  stroke(0);
  line(-7.5, -9, -7.5, -11);//FlagPole
  fill(255, 0, 0);//Red
  triangle(-7.5, -10, -7.5, -11, -5.5, -10.5);//Flag
  fill(#D9CEED);
  drawjagged(-2.5, -3);
  fill(#C49E16);//DarkGold
  drawjagged(-2.5, -7);
  pushMatrix();
  scale(.7);
  drawjagged(8.2, -5.5);
  drawjagged(-13.2, -5.5);
  popMatrix();
  //TopLefttWindow
  fill(#A7735F);//Brown
  beginShape();
  vertex(-7, -1);
  vertex(-7, -2);
  vertex(-7.5, -2.5);
  vertex(-8, -2);
  vertex(-8, -1);
  endShape(CLOSE);
  rect(-8, 3, 1, 2.5, 60, 60, 0, 0);//LefttDoor

  //RightSkinnyTower
  fill(#D9CEED);//LightTan
  rect(3.5, -1, 1.5, 6.5);
  fill(#EDBD0C);//RoyalBlue
  triangle(2.7, -1, 4.25, -6, 5.7, -1);
  strokeWeight(.1);
  stroke(0);
  line(4.25, -6, 4.25, -8);//FlagPole
  //noStroke();
  fill(255, 0, 0);
  triangle(4.25, -7, 4.25, -8, 6.25, -7.5);//Flag

  //LeftSkinnyTower
  fill(#D9CEED);//LightTan
  rect(-5, -1, 1.5, 6.5);
  fill(#EDBD0C);//RoyalBlue
  triangle(-2.7, -1, -4.25, -6, -5.7, -1);
  strokeWeight(.1);
  stroke(0);
  line(-4.25, -6, -4.25, -8);//FlagPole
  fill(255, 0, 0);//Red
  triangle(-4.25, -7, -4.25, -8, -2.25, -7.5);//Flag
  popMatrix();
}


void drawjagged(float xx, float yy) {
  pushMatrix();
  translate(xx, yy);
  beginShape();
  vertex(0, 0);
  vertex(0, -1.5);
  vertex(1, -1.5);
  vertex(1, -1);
  vertex(2, -1);
  vertex(2, -1.5);
  vertex(3, -1.5);
  vertex(3, -1);
  vertex(4, -1);
  vertex(4, -1.5);
  vertex(5, -1.5);
  vertex(5, 0);
  endShape(CLOSE);
  popMatrix();
}

void drawBrick(float xp, float yp) {
  pushMatrix();
  // noStroke();
  translate(xp, yp);
  fill(#C0A2F7, 255);
  rect(0, 0, 1, .6, 5, 5, 5, 5);
  popMatrix();
}

void mousePressed() {
  if (time==0) {
    timeGo=true;
    horizonGo=true;
    castleGo=true;
  }
}


void draw() {
  smooth();
  background(120, 184, 256);
  cloud(cloudMove);
  pushMatrix();
  translate(-vT, 0);
  for (int i=0; i<numTrees; i++) {
    tree(xT[i], yT[i]+treeMove, widthTree[i], colorT[i], colorTt[i]);
  }
  popMatrix();
  fill(40, 130, 100);
  stroke(0, 100, 0);
  strokeWeight(2);
  rect(0, height-horizon, width, horizon);
  pushMatrix();
  translate(400-castleMove, 360);
  scale(castleSize);
  translate(-400, -360);
  castle();
  popMatrix();
  if (timeGo) {
    time+=0.02;
    cloudMove+=0.05;
  }
  if (time>5) {
    horizonGo=castleGo=false;
    castleMove+=1.5;
    vT++;
  }
  if (horizonGo) {
    horizon--;
    treeMove+=0.6;
    
  }
  if (castleGo) {
    castleSize+=0.02;
  }
  println (time);
}
